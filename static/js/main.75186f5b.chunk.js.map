{"version":3,"sources":["components/modal.jpg","components/Modal.js","globalStyle.js","App.js","reportWebVitals.js","index.js"],"names":["Background","styled","div","ModalWrapper","ModalImg","img","ModalContent","CloseModalButton","MdClose","Modal","showModal","setShowModal","modalRef","useRef","animation","useSpring","config","duration","opacity","transform","keyPress","useCallback","e","key","useEffect","document","addEventListener","removeEventListener","ref","onClick","current","target","style","src","img1","alt","prev","GlobalStyle","createGlobalStyle","Container","Button","button","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qNAAe,MAA0B,kC,eCMnCA,EAAaC,IAAOC,IAAV,0LAUVC,EAAeF,IAAOC,IAAV,sQAaZE,EAAWH,IAAOI,IAAV,mHAORC,EAAeL,IAAOC,IAAV,wTAoBZK,EAAmBN,YAAOO,IAAPP,CAAH,qKAWTQ,EAAQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC3BC,EAAWC,mBAEXC,EAAYC,oBAAU,CAC1BC,OAAQ,CACNC,SAAU,KAEZC,QAASR,EAAY,EAAI,EACzBS,UAAWT,EAAS,uCAShBU,EAAWC,uBACf,SAACC,GACe,WAAVA,EAAEC,KAAoBb,GACxBC,GAAa,KAGjB,CAACA,EAAcD,IAQjB,OALAc,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWN,GAC9B,kBAAMK,SAASE,oBAAoB,UAAWP,MACpD,CAACA,IAGF,mCACGV,EACC,cAACV,EAAD,CAAY4B,IAAKhB,EAAUiB,QAvBd,SAACP,GACdV,EAASkB,UAAYR,EAAES,QACzBpB,GAAa,IAqBX,SACE,cAAC,WAAST,IAAV,CAAc8B,MAAOlB,EAArB,SACE,eAACX,EAAD,CAAcO,UAAWA,EAAzB,UACE,cAACN,EAAD,CAAU6B,IAAKC,EAAMC,IAAI,WACzB,eAAC7B,EAAD,WACE,gDACA,yEACA,iDAEF,cAACC,EAAD,CACE,aAAW,cACXsB,QAAS,kBAAMlB,GAAa,SAACyB,GAAD,OAAWA,eAK7C,QCnHGC,EAAcC,YAAH,4ICGlBC,EAAYtC,IAAOC,IAAV,oHAOTsC,EAASvC,IAAOwC,OAAV,gMA6BGC,MAlBf,WACE,MAAkCC,oBAAS,GAA3C,mBAAOjC,EAAP,KAAkBC,EAAlB,KAMA,OACE,mCACE,eAAC4B,EAAD,WACE,cAACC,EAAD,CAAQX,QAPI,WAChBlB,GAAa,SAACyB,GAAD,OAAWA,MAMpB,yBACA,cAAC,EAAD,CAAO1B,UAAWA,EAAWC,aAAcA,IAC3C,cAAC0B,EAAD,UCvBOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAAS+B,eAAe,SAM1BZ,M","file":"static/js/main.75186f5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/modal.508cd51b.jpg\";","import React, { useRef, useEffect, useCallback } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport styled from \"styled-components\";\nimport img1 from \"../components/modal.jpg\";\nimport { MdClose } from \"react-icons/md\";\n\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalWrapper = styled.div`\n  width: 800px;\n  height: 500px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`;\n\nconst ModalImg = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 10px 0 0 10px;\n  background: #000;\n`;\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n\n  p {\n    margin-bottom: 1rem;\n  }\n\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`;\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`;\n\nexport const Modal = ({ showModal, setShowModal }) => {\n  const modalRef = useRef();\n\n  const animation = useSpring({\n    config: {\n      duration: 250,\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`,\n  });\n\n  const closeModal = (e) => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n    }\n  };\n\n  const keyPress = useCallback(\n    (e) => {\n      if (e.key === \"Escape\" && showModal) {\n        setShowModal(false);\n      }\n    },\n    [setShowModal, showModal]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", keyPress);\n    return () => document.removeEventListener(\"keydown\", keyPress);\n  }, [keyPress]);\n\n  return (\n    <>\n      {showModal ? (\n        <Background ref={modalRef} onClick={closeModal}>\n          <animated.div style={animation}>\n            <ModalWrapper showModal={showModal}>\n              <ModalImg src={img1} alt=\"camera\" />\n              <ModalContent>\n                <h1>Are you ready?</h1>\n                <p>Get exclusive access to our next launce.</p>\n                <button>Join Now</button>\n              </ModalContent>\n              <CloseModalButton\n                aria-label=\"close modal\"\n                onClick={() => setShowModal((prev) => !prev)}\n              />\n            </ModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null}\n    </>\n  );\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  *{\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Arial', sans-serif;\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Modal } from \"./components/Modal\";\nimport { GlobalStyle } from \"./globalStyle\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Button = styled.button`\n  min-width: 100px;\n  padding: 16px 32px;\n  border-radius: 4px;\n  border: none;\n  background: #141414;\n  color: #fff;\n  font-size: 24px;\n  cursor: pointer;\n`;\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  const openModal = () => {\n    setShowModal((prev) => !prev);\n  };\n\n  return (\n    <>\n      <Container>\n        <Button onClick={openModal}>I'm a Modal</Button>\n        <Modal showModal={showModal} setShowModal={setShowModal} />\n        <GlobalStyle />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}